// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;
    using System.Buffers;
    using MessagePack;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(6)
            {
                { typeof(global::RLTPS.LevelData.BlockData[]), 0 },
                { typeof(global::UnityEngine.KeyCode[]), 1 },
                { typeof(global::RLTPS.LevelData.BlockData), 2 },
                { typeof(global::RLTPS.LevelData.BlockPattern), 3 },
                { typeof(global::RLTPS.LevelData.GameStage), 4 },
                { typeof(global::RLTPS.Model.KeyConfigData), 5 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::RLTPS.LevelData.BlockData>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::UnityEngine.KeyCode>();
                case 2: return new MessagePack.Formatters.RLTPS.LevelData.BlockDataFormatter();
                case 3: return new MessagePack.Formatters.RLTPS.LevelData.BlockPatternFormatter();
                case 4: return new MessagePack.Formatters.RLTPS.LevelData.GameStageFormatter();
                case 5: return new MessagePack.Formatters.RLTPS.Model.KeyConfigDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.RLTPS.LevelData
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class BlockDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::RLTPS.LevelData.BlockData>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public BlockDataFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "X", 0 },
                { "Y", 1 },
                { "Hp", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("X"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Y"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Hp"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::RLTPS.LevelData.BlockData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.X);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Y);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.Hp);
        }

        public global::RLTPS.LevelData.BlockData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __X__ = default(int);
            var __Y__ = default(int);
            var __Hp__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Y__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Hp__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::RLTPS.LevelData.BlockData();
            ____result.X = __X__;
            ____result.Y = __Y__;
            ____result.Hp = __Hp__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BlockPatternFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::RLTPS.LevelData.BlockPattern>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public BlockPatternFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Width", 0 },
                { "Height", 1 },
                { "Blocks", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Width"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Height"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Blocks"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::RLTPS.LevelData.BlockPattern value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Width);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Height);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::RLTPS.LevelData.BlockData[]>().Serialize(ref writer, value.Blocks, options);
        }

        public global::RLTPS.LevelData.BlockPattern Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Width__ = default(int);
            var __Height__ = default(int);
            var __Blocks__ = default(global::RLTPS.LevelData.BlockData[]);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Width__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Height__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Blocks__ = formatterResolver.GetFormatterWithVerify<global::RLTPS.LevelData.BlockData[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::RLTPS.LevelData.BlockPattern();
            ____result.Width = __Width__;
            ____result.Height = __Height__;
            ____result.Blocks = __Blocks__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameStageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::RLTPS.LevelData.GameStage>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public GameStageFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "StageID", 0 },
                { "BallSpeed", 1 },
                { "BarSpeed", 2 },
                { "BlockPattern", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StageID"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("BallSpeed"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("BarSpeed"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("BlockPattern"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::RLTPS.LevelData.GameStage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.StageID);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.BallSpeed);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.BarSpeed);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::RLTPS.LevelData.BlockPattern>().Serialize(ref writer, value.BlockPattern, options);
        }

        public global::RLTPS.LevelData.GameStage Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __StageID__ = default(int);
            var __BallSpeed__ = default(float);
            var __BarSpeed__ = default(float);
            var __BlockPattern__ = default(global::RLTPS.LevelData.BlockPattern);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __StageID__ = reader.ReadInt32();
                        break;
                    case 1:
                        __BallSpeed__ = reader.ReadSingle();
                        break;
                    case 2:
                        __BarSpeed__ = reader.ReadSingle();
                        break;
                    case 3:
                        __BlockPattern__ = formatterResolver.GetFormatterWithVerify<global::RLTPS.LevelData.BlockPattern>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::RLTPS.LevelData.GameStage();
            ____result.StageID = __StageID__;
            ____result.BallSpeed = __BallSpeed__;
            ____result.BarSpeed = __BarSpeed__;
            ____result.BlockPattern = __BlockPattern__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.RLTPS.Model
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class KeyConfigDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::RLTPS.Model.KeyConfigData>
    {


        public void Serialize(ref MessagePackWriter writer, global::RLTPS.Model.KeyConfigData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::UnityEngine.KeyCode[]>().Serialize(ref writer, value.KeyPairs, options);
        }

        public global::RLTPS.Model.KeyConfigData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __KeyPairs__ = default(global::UnityEngine.KeyCode[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __KeyPairs__ = formatterResolver.GetFormatterWithVerify<global::UnityEngine.KeyCode[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::RLTPS.Model.KeyConfigData();
            ____result.KeyPairs = __KeyPairs__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

