// <auto-generated />
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using RLTPS.LevelData;
using System.Collections.Generic;
using System;
using RLTPS.Tables;

namespace RLTPS
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public GameStageTable GameStageTable { get; private set; }

        public MemoryDatabase(
            GameStageTable GameStageTable
        )
        {
            this.GameStageTable = GameStageTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null)
            : base(databaseBinary, internString, formatterResolver)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options)
        {
            this.GameStageTable = ExtractTableData<GameStage, GameStageTable>(header, databaseBinary, options, xs => new GameStageTable(xs));
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.GameStageTable.GetRawDataUnsafe());
            return builder;
        }

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                GameStageTable,
            });

            ((ITableUniqueValidate)GameStageTable).ValidateUnique(result);
            ValidateTable(GameStageTable.All, database, "StageID", GameStageTable.PrimaryKeySelector, result);

            return result;
        }

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "GameStage":
                    return db.GameStageTable;
                
                default:
                    return null;
            }
        }

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("GameStage", RLTPS.Tables.GameStageTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }
    }
}